Анализ и мониторинг компьютерной сети. Способы мониторинга. Протокол сетевого мониторинга SNMP, протокол удаленного мониторинга RMON.
Мониторингом сети называют работу системы, которая выполняет постоянное наблюдение за компьютерной сетью в поисках медленных или неисправных систем и которая при обнаружении сбоев сообщает о них сетевому администратору с помощью почты и тд.
Анализ сети – это процесс захвата сетевого трафика и его быстрого просмотра для определения того, что произошло с сетью.
Способы мониторинга:
— маршрутизаторо-ориентированный мониторинг, встроен в сами маршрутизаторы и не требует дополнительной установки программного или аппаратного обеспечения
— не ориентированный на маршрутизаторы – требуют установки аппаратного и программного обеспечения и предоставляют большую гибкость.
Протокол сетевого мониторинга SNMP – протокол прикладного уровня, который является честью протокола TCP/IP. Позволяет руководить производительностью сети, находить и устранять сетевые проблемы, планировать рост сети. Он собирает статистику по трафику до конечного хоста через пассивные датчики, которые реализуются вместе с маршрутизатором. 
При использовании SNMP один или более административных компьютеров выполняют отслеживание или управление группой хостов или устройств в компьютерной сети. На каждой управляемой системе есть постоянно запущенная программа, называемая агент, которая через SNMP передает информацию менеджеру. 
Существует 4 основных команды, использующиеся SNMP для мониторинга: чтение, запись, пересечение, прерывание
Удаленный мониторинг RMON
RMON – протокол мониторинга компьютерных сетей, расширение SNMP. Может настраивать сигналы, которые будут мониторить сетью, представляет администраторам возможности управлять локальными сетями. Позволяет проводить мониторинг на всех сетевых уровнях, фиксируется на IP-трафике и трафике прикладного уровня.
Реализация RMON основывается на модели клинт/сервер. На устройствах мониторинга (зонды) установлено специальное ПО — агент RMON, которое собирает информацию и анализирует пакеты. Зонды действуют как серверы, а приложения сетевого управления, установленные на станциях управления сетью, исполняют роль клиентов.
Протоколы сетевого уровня. Уязвимости IP протокола, IP-spoofing.
Протокол Internet (IP). Он доставляет пакеты по сети Internet без гарантии доставки и без установления соединения.
Уязвимости протоколов, входящих в стек TCP/IP обусловлены, как правило, слабой аутентификацией, ограничением размера буфера, отсутствием проверки корректности служебной информации и т.п.
IP-spoofing(подделка IP адреса) - это атака, цель которой  убедить удаленную систему, что она получает пакеты от некого источника, IP-адрес которого отличается от IP-адреса атакующего.
Наиболее распространенных формы атак IP-спуфинга:
DDoS-атаки (распределенный отказ в обслуживании)
При DDoS-атаке злоумышленники используют поддельные IP-адреса для перегрузки серверов пакетами данных. В результате большие объемы интернет-трафика замедляют или нарушают работу веб-сайтов и сетей, а злоумышленники скрывают свою личность.
Маскировка ботнет-устройств
IP-спуфинг может использоваться для получения доступа к компьютерам путем маскировки ботнетов. Ботнет – это сеть компьютеров, управляемых злоумышленником из единого источника. На каждом компьютере работает специальная программа-бот, выполняющая вредоносные действия от имени злоумышленника. IP-спуфинг позволяет замаскировать ботнет, поскольку каждое устройство в такой сети имеет поддельный IP-адрес, что затрудняет отслеживание атаки. Это увеличивает продолжительность атаки, а вместе с ней и выигрыш злоумышленника.
Атаки типа «человек посередине»
Атака типа «человек посередине» - злоумышленники вклиниваются между двумя компьютерами, меняют пакеты и передают их без ведома отправителя или получателя. Если в результате подделки IP-адреса злоумышленники получат доступ к личным учетным записям для общения, они смогут, например, украсть информацию, направить пользователей на поддельные веб-сайты и многое другое. 

Роль и назначение DHCP. Основные атаки на DHCP и способы защиты от них.
DHCP-серверы централизованно управляют IP-адресами и связанными с ними сведениями и автоматически предоставляют их клиентам. Это позволяет настраивать параметры клиента сети на сервере, а не на каждом компьютере в отдельности.

Протоколы транспортного уровня. Алгоритм работы UDP, плюсы и минусы протокола. Уязвимости протокол UDP.
UDP – протокол дейтаграмм пользователя. Особенности: нет соединения, нет гарантии доставки данных, нет гарантии сохранения порядка сообщений.
Применение:
Преимущество UDP – скорость работы (нет накладных расходов на установку соединения)
Надежность (в современных сетях ошибки происходят редко, ошибку может обработать приложение)
Область применения (клиент-сервер, короткие запросы-ответы)
Применение UDP DNS 53 порт
	Протокол без соединения, без требований к открытию, поддержанию или прерыванию соединения
	Не гарантирует доставку данных получателю
	Отсутствие повторной передачи потерянных пакетов
	UDP-пакеты с определенными границами; отправляются по отдельности и проверяются на целостность по прибытии
	В отличие от TCP он обеспечивает передачу данных без получения подтверждения от пользователя. Проще говоря, просто отправляет пакеты и не ждет ничего в ответ. Из-за этого достигается высокая скорость в ущерб надежности.
Протоколы транспортного уровня. Алгоритм работы TCP, установка и разрыв соединения, механизм плавающего окна. Пассивные атаки на протокол TCP (sniffing).
TCP – протокол управления передачей. Гарантии TCP: доставка данных (подтверждение доставки, повторная отправка неподтвержденных сообщений), сохранения порядка следования сообщений.
Варианты подтверждения: остановка и ожидание, скользящее окно.
Перед отправкой данных по TCP необходимо установить соединение
Задачи соединения: 
	Убедиться, что отправитель и получатель хотят передавать данные друг другу
	Договориться о нумерации потока байт
	Договориться о параметрах соединения 
После завершения передачи данных соединение разрывается.
Установка соединения (трехкратное рукопожатие) (SYN, SYN+ACK, ACK)
Механизм скользящее окно:
  
Кумулятивное подтверждение: подтверждение приема указанного байта данных и всех предыдущих, используется по умолчанию.
Разрыв соединения
Соединение в TCP дуплексное: данные могут передаваться в обе стороны
Схема разрыва соединения: 
Одновременное (обе стороны разорвали соединение), одностороннее (одна сторона прекращает передавать данные, но может принимать)
Варианты разрыва соединения: одностороннее закрытие (FIN), разрыв из-зп критической ситуации (RST)
Пассивные атаки sniffing (подслушивание)
	Доступ к машине, расположенной на пути сетевого потока, который необходимо анализировать
	Доступ к машине, которая расположена в одном сегменте сети с системой, которой имеет доступ к сетевому потоку
Решение: шифрование TCP/IP-потока (secure shell или использование одноразовых паролей), использование интеллектуальных свитчей и UTP, в результате чего каждая машина получает только тот трафик, что адресован ей.
Активные атаки на уровне TCP: Предсказание TCP sequence number, Ранняя десинхронизация, Flood. Виды TCP сканирования.
Крэкер взаимодействует с получателем информации, отправителем и/или промежуточными системами, возможно, модифицируя и/или фильтруя содержимое TCP/IP-пакетов.
Предсказание TCP sequence number
Установка TCP-соединения: клиент выбирает и передает серверу sequence number (C-SYN), в ответ на это сервер посылает клиенту пакет данных, содержащий подтверждение (C-ACK) и собственный sequence number сервера (S-SYN). Теперь уже клиент должен выслать подтверждение (S-ACK). После этого соединение считается установленным и начинается обмен данными. При этом каждый пакет имеет в заголовке поле для sequence number и acknowledge number.
 
  
Виды TCP сканирования:
	Сканирование методом Connect (устанавливается полное TCP-соединение)
	SYN-сканирование (с установлением наполовину открытого соединением)
	FIN-сканирование (обратное стелс-сканирование)
	ACK-сканирование
	XMAS-сканирование (Устанавливаются FIN PSH URG флаги)
	NULL-сканирование (Не устанавливаются никакие биты)
Прокси-серверы и их виды. NAT-прокси, FTP-прокси, HTTP- и HTTPS- прокси,  Socks-прокси.
Прокси – это приложение-посредник, выполняющееся на МЭ и выполняющее следующие функции: прием и анализ запросов от клиентов, перенаправление запросов реальному серверу.
Прокси сервера бывают нескольких типов:
	FTP прокси используются для загрузки данных на FTP сервера
	SMTP, POP3 и IMAP прокси используются для отправки и приема электронной почты
	HTTP и HTTPS прокси предназначены для просмотра веб-страниц
	Socks прокси передает все данные на конечный сервер как клиент, поэтому считается самым анонимным протоколом
HTTP прокси - это самый распространенный вид прокси. Основное предназначение - организация работы браузеров и других программ, использующих TCP протокол.
Принцип работы: программа или браузер посылает запрос прокси-серверу на открытие определенного URL ресурса. Прокси-сервер получает данные с запрашиваемого ресурса и отдает эти данные вашему браузеру.
HTTP прокси позволяют:
	кешировать загруженные файлы (картинки, страницы) для увеличения скорости открытия веб-сайтов
	ограничивать доступ к определенным ресурсам (например, Youtube)
	фильтровать данные. Например, вместо баннеров с рекламой показывать прозрачные картинки, которые не будут нарушать дизайн сайта, но будут существенно экономить время загрузки страницы и трафик
	ограничивать скорость соединения
	вести логи, контролировать трафик по пользователям
HTTPS прокси - фактически это HTTP-прокси, буква "S" в данном случае означает "secure" (защищенный) с поддержкой защищенного SSL соединения. Эти прокси применяются, когда требуется передать секретную информацию (например, логины/пароли, номера пластиковых карт). 
Принцип работы: прокси-сервер соединяется с ресурсом и ваш трафик шифруется. При таком методе отсутствует возможность узнать, какая именно информация передается через прокси-сервер (это ограничивает применение прокси как фильтра). Также в процессе шифрации и дешифрации прокси участия не принимает. Этим занимается клиентская программа (браузер) и целевой сервер. Таким образом, HTTPS proxy занимается пассивной передачей зашифрованной информации и не производит никакой обработки передаваемой информации. Такой метод работы позволяет использовать HTTPS proxy для передачи практически любого TCP-протокола. 
Протокол Socks разрабатывался для программ, которые не поддерживают использование прокси напрямую. Стандартные порты 1080, 1081.
Данный протокол пережил множество изменений и на данный момент используются две версии протокола:
	Socks 4 поддерживает только TCP соединения
	Socks 5 поддерживает TCP, UDP, авторизацию по логину и паролю и возможность удаленного DNS-запроса
Socks не занимается модерацией HTTP-заголовков. Socks-сервер будет передавать информацию через себя в чистом виде. Поэтому все Socks серверы являются анонимными.
Socks прокси не передает информацию о вашем IP адресе. Веб-сайт не сможет определить использование прокси. Соединение с веб-сайтом будет абсолютно прозрачным, также как если бы вы работали с ним напрямую. При этом веб-сайт будет видеть IP адрес прокси, а не ваш реальный IP адрес.
Socks поддерживает все протоколы, включая HTTP, HTTPS, FTP.
FTP прокси бывает, чаще всего, двух видов:
1.	Прокси сервер обменивается и с сервером и с клиентом по FTP( в этом случае удобно работать FTP – клиенту, находящемуся на вашем компьютере);
2.	Прокси работает с FTP-сервером по FTP – протоколу, а с браузером – по НТТР или FTP ( этот вариант более “любим” браузером, так как для него HTTP – “родной” протокол). К тому же, в современные HTTP прокси вставляется возможность работы с FTP –протоколом.


Прямой и обратный запросы DNS. Зоны прямого и обратного просмотра.  Механизм реализации атаки "подмена DNS ответа", последствия.
В DNS имеются следующие типы запросов: итеративный (он же прямой), обратный и рекурсивный.

Итеративный (он же прямой, он же нерекурсивный) запрос посылает доменное имя DNS серверу и просит вернуть либо IP адрес этого домена, либо имя DNS сервера, авторитативного для этого домена. При этом, сервер DNS не опрашивает другие серверы для получения ответа. Так работают корневые и TLD серверы.

Рекурсивный запрос посылает DNS серверу доменное имя и просит возвратить IP адрес запрошенного домена. При этом сервер может обращаться к другим DNS серверам.

Обратный запрос посылает IP  и просит вернуть доменное имя.
Зоны прямого просмотра предназначены для сопоставления доменного имени с IP-адресом. Зоны обратного просмотра работают в противоположную сторону и сопоставляют IP-адрес с доменным именем.
Подмена DNS-ответа (внедрение ложного DNS-сервера)
Цели и угрозы: подмена доверенных объектов сети; перехват практически любого траффика жертвы; подмена сетевых запросов/ответов.
Схема реализации атаки в случае, если есть доступ к трафику жертвы (случай на картинке):
•	Атакующий ждет DNS-запроса от жертвы на хосте 1 (атакующий находится либо на хосте нарушителя 1, либо на хосте нарушителя 2; но может быть и где-либо еще, где есть доступ к трафику хоста 1 (жертвы)).
•	После передачи хостом 1 DNS-запроса, атакующий принимает запрос, в котором запоминает ID и порт. Далее, такакующий отправляет ложный DNS-ответ, в котором подменяет поле IP-адрес DNS-сервера на свойIP, делая свой компьютер для жертвы валидным DNS-сервером.
•	Хост 1 принимает ложный DNS-ответ, принимает IP-адрес хакера за подлинный DNS-сервер и отправляет все последующие запросы ему.
•	Атакующий после получения DNS-запросов пересылает их на настоящий DNS-сервер, получает правильный ответ и пересылает его назад – жертве. Существует легкая возможность подменить в DNS-ответе IP любого запрашиваемого DNS-имени.
Схема реализации атаки в случае, если доступа к трафику жертвы нет:
•	Атакующий не дожидается DNS-запроса (он его и не получит, ибо траффик жертвы через него не проходит), а отправляет массированный поток ложных DNS-ответов, подбирая на ходу нужные порт и ID запроса (обыкновенным bruteforce-ом). При этом в ложном ответе атакующий подменяет поле IP-адрес DNS-сервера на свой IP, делая свой компьютер для жертвы валидным DNS-сервером.
•	Хост 1, отправив запрос, принимает ложный DNS-ответ, в котором указан IP-адрес хакера, как IP подлинного DNS-сервера. В итоге, жертва отправляет все последующие DNS-запросы злоумышленнику.
•	Атакующий после получения DNS-запросов пересылает их на настоящий DNS-сервер, получает правильный ответ и пересылает его назад – жертве. Существует легкая возможность подменить в DNS-ответе IP любого запрашиваемого DNS-имени.


Объекты Active Directory. Права доступа Active Directory.
Основной задачей Active Directory является хранение информации обо всех объектах в сети и предоставление её внешним системам.
Active Directory имеет иерархическую структуру, состоящую из объектов. Объекты разделяются на три основные категории: ресурсы (например, принтеры), службы (например, электронная почта) и учётные записи пользователей и компьютеров. Служба предоставляет информацию об объектах, позволяет организовывать объекты, управлять доступом к ним, а также устанавливает правила безопасности.
Каждый объект представляет отдельную сущность — пользователя, компьютер, принтер, приложение или общую сетевую папку — и его атрибуты. Объекты могут также быть контейнерами для других объектов. Объект уникально идентифицируется своим именем и имеет набор атрибутов — характеристик и данных, которые объект может содержать, — которые зависят от типа объекта. Атрибуты являются составляющей базовой структуры объекта и определяются в схеме. Схема определяет, какие типы объектов могут существовать в AD.
Права доступа сформулированы относительно трёх действий: чтение, запись и исполнение. Эти права доступа могут быть предоставлены трём классам пользователей: владельцу файла (пользователю), группе-владельцу файла, и всем пользователям, которые не входят в эту группу.
Право на чтение даёт пользователю возможность читать содержимое файла или, если такой доступ разрешён к каталогам, просматривать содержимое каталога (используя команду ls). Право на запись даёт пользователю возможность записывать или изменять файл, а право на запись к каталогам — возможность создавать новые файлы или удалять файлы из этого каталога. Право на исполнение позволяет пользователю запускать файл как программу или скрипт командной оболочки (если файл является программой или скриптом программной оболочки). Владение правами на исполнение для каталога позволяет перейти (командой cd) в этот каталог.
Рекурсивный и нерекурсивный режимы работы DNS сервера. DDos атака DNS amplification, механизм  реализации.

Рекурсивный запрос – это запрос на выполнение полного преобразования имени в адрес IP. Если сервер DNS имеет информацию о записи, он ответит клиенту, завершив запрос ответом. Если сервер DNS не знает ответа, он передает запрос в один или несколько авторитативных DNS-серверов.
Нерекурсивный запрос. Запрос посылает доменное имя DNS серверу и просит вернуть либо IP адрес этого домена, либо имя DNS сервера, авторитетного для этого домена. При этом сервер DNS не опрашивает другие серверы для получения ответа.
DNS Amplification – это разновидность ддос-атаки, суть усиления заключается в том, что злоумышленник посылает короткий запрос уязвимому днс серверу, который отвечает на запрос уже значительно большим по размеру пакетом. Если использовать в качестве исходного IP-адреса при отправке запроса адрес компьютера жертвы (ip spoofing), то уязвимый DNS-сервер будет посылать в большом количестве ненужные пакеты компьютеру-жертве, пока полностью не парализует его работу.
Защита днс серверов:
Метод 1. Отсутствие запущенных неиспользуемых сетевых сервисов и протоколов – проверяется той же командой: с последующей остановкой и удалением пакетов, не используемых на сервере.  При обслуживании запросов исключительно по IPv4, необходимо отключить IPv6.
Метод 2. Разрешение управляющих протоколов только из внутренней сети компании и доверенных IP. Достигается либо ограничением с помощью внешнего firewall/VPN концентратора (при наличии), либо системного iptables/ ipfw/
Метод 3. Разрешено только то, что разрешено. Явно не разрешенные доступы запрещаются.
Метод 4. Установка последних стабильных обновленийи патчей ОС, а также используемых прикладных сервисов.
Метод 5. Ограничение рекурсии DNS. Если DNS-сервер исключительно авторитативный, то обработка рекурсивных запросов на нем не нужна. Он должен отвечать только на запросы по своей зоне, не перенаправляя их.
Атаки на протокол DNS: атака Каминского, механизм реализации, вероятные последствия.
Атака Каминского — повреждение целостности данных в системе DNS. 
Суть атаки заключается в том, что сначала хакер отправляет DNS-резолверу запрос для несуществующего домен. Получив такой запрос, DNS-резолвер перенаправляет его на авторитетный сервер имен, чтобы получить IP-адрес ложного субдомена. На этом этапе злоумышленник перегружает DNS-резолвер огромным количеством поддельных ответов в надежде, что один из этих поддельных ответов совпадет с идентификатором транзакции исходного запроса. В случае успеха хакер подменяет в кэше DNS-сервера IP-адрес, Резолвер продолжит отвечать всем запрашивающим, что поддельный IP-адрес является настоящим, пока не истечет жизненный цикл записи DNS.
 
Атаки на протокол DNS: DNS флуд, атака посредством отраженных DNS-запросов.
DNS Флуд. Злоумышленник генерирует DNS-пакеты, которые отправляются посредством UDP-протокола на DNS-сервер. Стандартный ПК может сгенерировать 1000 DNS-запросов в секунду, тогда как обычный DNS-сервер может обработать только 10000 DNS-запросов в секунду. Другими словами, для того, чтобы вывести из строя DNS-сервер, потребуется всего 10 компьютеров. Поскольку DNS-сервера главным образом используют UDP-протокол, злоумышленникам не требуется устанавливать соединения, и они могут изменить IP-адрес источника и замаскироваться.
 



Атака посредством отраженных DNS-запросов
 
Атаки на протокол DNS посредством рекурсивных DNS-запросов, механизм реализации, вероятные последствия.
При такой атаке используются особенности работы рекурсивных DNS-запросов. В рекурсивных DNS-запросах, когда DNS-клиент делает запрос с именем, которое отсутствует в кэш-памяти DNS-сервера, сервер отправляет повторяющиеся запросы другим DNS-серверам до тех пор, пока нужный ответ не будет отправлен клиенту. Воспользовавшись особенностями данного процесса, злоумышленник отправляет рекурсивные запросы с использованием фальшивых имен, которые, как он знает, не существует в кэш-памяти сервера (смотрите пример скриншота экрана). Чтобы разрешить такие запросы, DNS-сервер должен обработать каждую запись, временно сохраняя ее, и отправить запрос другому DNS-серверу, затем дождаться ответа. Другими словами, потребляется все большее количество вычислительных ресурсов (процессора, памяти и пропускной способности), до тех пор, пока ресурсы не заканчиваются.
 
Способы защиты DNS, проблема рекурсии и ее ограничение, расширение EDNS(0).
Защита днс серверов:
Метод 1. Отсутствие запущенных неиспользуемых сетевых сервисов и протоколов – проверяется той же командой: с последующей остановкой и удалением пакетов, не используемых на сервере.  При обслуживании запросов исключительно по IPv4, необходимо отключить IPv6.
Метод 2. Разрешение управляющих протоколов только из внутренней сети компании и доверенных IP. Достигается либо ограничением с помощью внешнего firewall/VPN концентратора (при наличии), либо системного iptables/ ipfw/
Метод 3. Разрешено только то, что разрешено. Явно не разрешенные доступы запрещаются.
Метод 4. Установка последних стабильных обновленийи патчей ОС, а также используемых прикладных сервисов.
Метод 5. Ограничение рекурсии DNS. Если DNS-сервер исключительно авторитативный, то обработка рекурсивных запросов на нем не нужна. Он должен отвечать только на запросы по своей зоне, не перенаправляя их. Если же сервер выполняет роль и авторитативного, и рекурсивного DNS, необходимо разрешить выполнять запросы только из доверенных подсетей.
EDNS(0)
В RFC6891 описаны требования к поддержке Extension Mechanisms for DNS (EDNS(0)) серверами во избежание атак типа DNS amplification и при этом совместимости с RFC1035. По умолчанию для обработки запросов используется протокол UDP, но в случае когда размер UDP-сообщения в ответном пакете превышает 512 байт, должна происходить инициация запроса по протоколу TCP.
Функционал EDNS0 спасает не всегда. Например, если DNS-запросы рекурсивно перенаправляются открытыми резолверами наших клиентов либо сетевым оборудованием уровня доступа, на котором доступен всем функционал DNS-relay. В этом случае сам клиент является легитимным, а принудительный̆ переход на TCP только увеличит потребление ресурсов сервера в случае атаки.
Принципы криптографической защиты информации. Симметричные и асимметричные криптосистемы шифрования.
 
Симметричным считается любой шифр, использующий один и тот же секретный ключ для шифрования и расшифровки. В зависимости от принципа работы алгоритмы симметричного шифрования делятся на два типа: блочные; потоковые.
Блочные алгоритмы шифруют данные блоками фиксированной длины (64, 128 или другое количество бит в зависимости от алгоритма). Если все сообщение или его финальная часть меньше размера блока, система дополняет его предусмотренными алгоритмом символами, которые так и называются дополнением.
К актуальным блочным алгоритмам относятся:
	AES
	ГОСТ 28147-89
	RC5
	Blowfish
	Twofish
Потоковое шифрование данных предполагает обработку каждого бита информации с использованием гаммирования, то есть изменения этого бита с помощью соответствующего ему бита псевдослучайной секретной последовательности чисел, которая формируется на основе ключа и имеет ту же длину, что и шифруемое сообщение. 
Потоковое шифрование в настоящее время используют следующие алгоритмы:
RC4, Salsa20, HC-256
Симметричные алгоритмы требуют меньше ресурсов и демонстрируют большую скорость шифрования, чем асимметричные алгоритмы.
Асимметричное шифрование — это метод шифрования данных, предполагающий использование двух ключей — открытого и закрытого. Открытый (публичный) ключ применяется для шифрования информации и может передаваться по незащищенным каналам. Закрытый (приватный) ключ применяется для расшифровки данных, зашифрованных открытым ключом.
Асимметричное шифрование решает главную проблему симметричного метода, при котором для кодирования и восстановления данных используется один и тот же ключ. Если передавать этот ключ по незащищенным каналам, его могут перехватить и получить доступ к зашифрованным данным. Также асимметричные алгоритмы применяются для создания электронных подписей для подтверждения авторства и (или) целостности данных. При этом подпись генерируется с помощью закрытого ключа, а проверяется с помощью открытого.
Алгоритмы: RSA, DSA, Diffie-Hellman

Анализ угроз информационной безопасности объектов сетевой инфраструктуры. Методы анализа угроз ИБ. Популярные инструменты пентестера.
Электронная цифровая подпись. Функция хэширования. SSL-сертификаты.
Электронная цифровая подпись используется для аутентификации текстов, передаваемых по телекоммуникационным каналам. 
 

 
Система ЭЦП включает две основные процедуры: формирование цифровой подписи, проверки цифровой подписи.
 
 
Схемы сетевой защиты на базе МЭ. Демилитаризованная зона, DMZ
МЭ — это специализированное ПО или АО, позволяющее разделить сеть на две или более частей и реализовать набор правил, определяющих условия прохождения сетевых пакетов из одной части в другую.
Основное назначение МЭ — воплощение политики безопасности, принятой в организации в вопросах обмена информацией с внешним миром.
Механизмы защиты МЭ: фильтрация пакетов, шифрование, трансляция адресов, аутентификация, противодействие некоторым видам атак, управление списками доступа на маршрутизаторах. 
Для подключения МЭ могут использоваться различные схемы, которые зависят от условий функционирования защищаемой сети, а также от количества сетевых интерфейсов и других характеристик, используемых МЭ. Широкое распространение получили схемы:
• защиты сети с использованием экранирующего маршрутизатора;
• единой защиты локальной сети;
• с защищаемой закрытой и не защищаемой открытой подсетями;
• с раздельной защитой закрытой и открытой подсетей.
Протоколы прикладного уровня HTTP, HTTPS. Протокол TLS. 
HTTP — широко распространённый протокол передачи данных, изначально предназначенный для передачи гипертекстовых документов.
Протокол HTTP предполагает использование клиент-серверной структуры передачи данных. Клиентское приложение формирует запрос и отправляет его на сервер, после чего серверное программное обеспечение обрабатывает данный запрос, формирует ответ и передаёт его обратно клиенту. 
Задача, которая решается с помощью протокола HTTP — обмен данными между пользовательским приложением, осуществляющим доступ к веб-ресурсам (обычно это веб-браузер) и веб-сервером.
Несмотря на свою функциональность у HTTP есть один очень важный недостаток ― незащищённость. Данные между пользователями передаются в открытом виде, злоумышленник может вмешаться в передачу данных, перехватить их или изменить. Чтобы защитить данные пользователей, был создан протокол HTTPS.
HTTPS работает благодаря SSL/TLS-сертификату. SSL/TLS-сертификат ― это цифровая подпись сайта. С её помощью подтверждается его подлинность. Перед тем как установить защищённое соединение, браузер запрашивает этот документ и обращается к центру сертификации, чтобы подтвердить легальность документа. Если он действителен, то браузер считает этот сайт безопасным и начинает обмен данными.
TLS — Протокол защиты транспортного уровня, как и его предшественник SSL — криптографические протоколы, обеспечивающие защищённую передачу данных между узлами в сети Интернет. TLS и SSL используют асимметричное шифрование для аутентификации, симметричное шифрование для конфиденциальности и коды аутентичности сообщений для сохранения целостности сообщений.
Данный протокол широко используется в приложениях, работающих с сетью Интернет, таких как веб-браузеры, работа с электронной почтой, обмен мгновенными сообщениями и IP-телефония (VoIP).
 

Механизмы защиты, реализуемые при помощи МЭ.
Механизмы защиты МЭ: 
	фильтрация пакетов, шифрование, 
	трансляция адресов, 
	аутентификация, 
	противодействие некоторым видам атак, 
	управление списками доступа на маршрутизаторах. 
Трансляция сетевых адресов, виды: статическая, динамическая.
Трансляция адресов – это замена в IP-пакете IP-адреса отправителя или получателя другим IP-адресом при прохождении пакета через устройство, осуществляющее трансляцию.
(Маскировка внутренних IP-адресов от внешнего мира, решение проблемы некорректности либо нехватки IP-адресов внутренней сети)
Виды: 
Статическая (двунаправленная) — это задание однозначного соответствия между внутренним адресом ресурса и его адресом во внешней сети.
(Позволяет иметь доступ к внутренним узлам извне, применяется в случае сложившегося распределения внутренних адресов)
Динамическая (трансляция адресов-портов) — это отображение адресного пространства внутренней сети на один адрес из внешней сети.
(Не позволяет инициировать доступ к внутренним узлам извне, решает проблему нехватки адресов)
Недостатки трансляции адресов:
	Увеличение вероятности неверной адресации
	Невозможность или трудности запуска некоторых приложений
	Проблемы с SNMP, DNS
	Замедление работы 
Типы межсетевых экранов: пакетный фильтр, шлюз уровня соединений, шлюз прикладного уровня.
Межсетевой экран (МЭ) -это специализированное программное или аппаратное (или программно-аппаратное) средство, позволяющее разделить сеть на две или более частей и реализовать набор правил, определяющих условия прохождения сетевых пакетов из одной части в другую.

Пакетные фильтры
Пакетные фильтры осуществляют анализ информации сетевого и транспортного уровней модели OSI . Это сетевые адреса (например, IP ) отправителя и получателя пакета номера портов отправителя и получателя, флаги протокола TCP , опции IP , типы ICMP . Обычно пакетные фильтры организуются средствами маршрутизаторов. Часто используются штатные средства операционных систем.
Пакеты проверяются на трех цепочках правил, конфигурируемых администратором.
Шлюзы уровня соединения
Этот тип МЭ основан на использовании так называемого принципа посредничества, т.е. запрос принимается МЭ, анализируется и только потом перенаправляется реальному серверу. Прежде чем разрешить установление соединения TCP между компьютерами внутренней и внешней сети, посредники уровня соединения сначала как минимум регистрируют клиента. При этом неважно, с какой стороны (внешней или внутренней) этот клиент находится. При положительном результате регистрации между внешним и внутренним компьютерами организуется виртуальный канал, по которому пакеты передаются между сетями.
Шлюзы прикладного уровня
Шлюзы прикладного уровня, часто называемые proxy -серверами, контролируют и фильтруют информацию на прикладном уровне модели OSI . Они различаются по поддерживаемым протоколам прикладного уровня. Наиболее часто поддерживаются службы Web ( HTTP ), ftp , SMTP , NNTP, telnet , DNS. Когда клиент внутренней сети обращается, например; к серверу Web , то его запрос попадает к посреднику Web (или перехватывается им). Последний устанавливает связь с сервером от имени клиента, а полученную информацию передает клиенту. Для внешнего сервера посредник выступает в качестве клиента, а для внутреннего клиента - в качестве сервера Web . 
Технология МЭ «Stateful Inspection»
Эта технология позволяет контролировать данные вплоть до уровня приложения, не требуя при этом отдельного процесса-посредника ( proxy ) для каждого защищаемого протокола или сетевой службы. В результате достигаются высокие показатели производительности, высокая гибкость решений и возможность быстро и достаточно просто адаптировать систему под новые нужды.
Основываясь на технологии инспекции пакетов с учетом состояния протокола, МЭ обеспечивает наивысший уровень безопасности. Метод stateful inspection обеспечивает сбор информации из пакетов данных, как коммуникационного, так и прикладного уровня, что достигается сохранением и накоплением ее в специальных контекстных таблицах, которые динамически обновляются.
 
После того как соединение занесено в таблицу, обработка последующих пакетов этого соединения происходит на основе анализа таблиц.
Технология виртуальных защищенных сетей. VPN-server, VPN-client, канал ЛВС-ЛВС, канал клиент-ЛВС. Классификация VPN.
Виртуальной защищенной сетью VPN называют объединение локальных сетей и отдельных компьютеров через открытую внешнюю среду передачи информации в единую виртуальную корпоративную сеть, обеспечивающую безопасность циркулирующих данных. Формируется путем построения виртуальных защищенных каналов связи, создаваемых на базе открытых каналов связи общедоступной сети.
VPN-клиент: решается программно. Выполняет функции шифрования и аутентификации. Сеть может быть построена без использования VPN-клиентов.
VPN-сервер: представляет собой программный или программно-аппаратный комплекс, устанавливаемый на компьютере, выполняющем функции серевра. VPN-сервер обеспечивает защиту серверов от НСД из внешних сетей, а также организацию защищенных соединений. 
 
 
VPN канального, сетевого и сеансового уровня. Основные варианты архитектуры VPN.
